 

import static java.lang.Integer.MAX_VALUE;

class Solution {
    public int[][] dirs={{1,0}, {-1,0}, {0,1},{0,-1}};
     public int longestIncreasingPath(int[][] matrix) {
    if (matrix == null || matrix.length == 0) return 0;
    int rows = matrix.length;
    int cols = matrix[0].length;
    int[][] cache = new int[rows][cols];
    int maxPath = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            maxPath = Math.max(maxPath, dfs(matrix, i, j, rows, cols, cache));
        }
    }
    return maxPath;
}

private int dfs(int[][] matrix, int i, int j, int rows, int cols, int[][] cache) {
    if (cache[i][j] != 0) return cache[i][j];
    int maxLength = 1;
    int[][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
    for (int[] dir : dirs) {
        int r = i + dir[0], c = j + dir[1];
        if (r >= 0 && r < rows && c >= 0 && c < cols && matrix[r][c] > matrix[i][j]) {
            int length = 1 + dfs(matrix, r, c, rows, cols, cache);
            maxLength = Math.max(maxLength, length);
        }
    }
    cache[i][j] = maxLength;
    return maxLength;
}

}
